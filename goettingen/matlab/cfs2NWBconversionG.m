% modified for nwb 2.4.0
% ongoing issues Dec. 2021:
% - Check the thing with the ones (line 96)

clear



mainfolder = uigetdir('E:\Data\MonkeyData\Monkeys','Select main folder containing all cell folders'); % select individual folders at start
outputfolder = uigetdir(mainfolder,'Select output folder'); 

cellList = getCellNames(mainfolder);
%T = readtable('manual_entry_data.csv');
sessionTag = 'MXX';

try % doesnt work
    A = evalin('base','snumber');   
catch
    A= 0;
    [snumber, name, devID, sname, sage, ssex, sspecies, area] = miscdesc(); % added this for description of animal and ID generation
end




for n = 1:length(cellList)
    cellID = cellList(n).name;
    disp(cellID)  
    fileList = dir([mainfolder,'/',cellList(n,1).name,'/*.mat']);
    CellCounter = n;
    CellTag = num2str(CellCounter, '%02.f');
    MATFXID = ['M',snumber,'_',name, '_A1_C', CellTag,'_']; % ID for MatFX naming convention - needs to be expanded on
    ID = [MATFXID,'Goettingen', '_',devID,'_Cell', CellTag];
    %% Initializing variables for Sweep table construction
    sweepCount = 0;
    sweep_series_objects_ch1 = []; sweep_series_objects_ch2 = [];
    SweepAmp = [];StimOff = []; StimOn = []; BinaryLP = []; BinarySP = [];

    %% Initializing nwb file and adding first global descriptors
    nwb = NwbFile(...
        'identifier', ID, ...
        'general_lab', 'Jochen Staiger', ...
        'general_institution', 'Institute for Neuroanatomy UMG', ...
        'general_experiment_description', 'Characterizing intrinsic biophysical properties of cortical NHP neurons.', ...
        'session_description', 'One experiment day' ...
    );

    device_name = 'CED digitizer Power 1401 mkII; Amplifier: SEC-05X';  % @Stefan: hier bitte die richtigen 

    disp('Manual entry data not found') % Species data
    %noManuTag = 1;
    nwb.general_subject = types.core.Subject( ...
        'description', sname, ...
        'age', sage, ...
        'sex', ssex, ...
        'species', sspecies ...
    );

    corticalArea = area; % Location place holder
     
    %% loading the matlab converted cfs files
    paths = fullfile({fileList.folder}, {fileList.name});
    for f = 1:length(fileList)
       load(paths{f})
       
    %% Getting start date from 1st recording of cell and checking for new session start 
        if f==1 
           cellStart = datetime([D.param.fDate(1:end-3), ...
               '/20', D.param.fDate(end-1:end),' ', D.param.fTime]...
            ,'TimeZone', 'local');
        end
        nwb.session_start_time = cellStart;
    %% load JSON from MCC get settings files if present    
        if isfile([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json'])
          raw = fileread([mainfolder,cellID,'\', fileList(f).name(1:end-3), 'json']); 
          settingsMCC = jsondecode(raw);
          cellsFieldnames = fieldnames(settingsMCC);               
          ic_elec_name = cellsFieldnames{1, 1}(2:end);
          electOffset = settingsMCC.(cellsFieldnames{1,1}).GetPipetteOffset; 
         else
          ic_elec_name = 'unknown electrode'; 
          electOffset = NaN;
         end 
   %% Getting run and electrode associated properties  
        nwb.general_devices.set(device_name, types.core.Device()); %% add more general devices
        device_link = types.untyped.SoftLink(['/general/devices/' device_name]);
        ic_elec = types.core.IntracellularElectrode( ...
            'device', device_link, ...
            'description', 'Properties of electrode and run associated to it',...
            'filtering', 'unknown',...
            'initial_access_resistance', 'has to be entered manually',...
            'location', corticalArea ...
         );
        nwb.general_intracellular_ephys.set(ic_elec_name, ic_elec);
        ic_elec_link = types.untyped.SoftLink(['/general/intracellular_ephys/' ic_elec_name]);     
        
    %% Data: recreating the stimulus waveform
       [On,Off] = GetStimulusEpoch(mean(D.data(:,:,2),2));
       StimOn(sweepCount+1:sweepCount+size(D.data,2)) = On*ones(size(D.data,2),1);
       StimOff(sweepCount+1:sweepCount+size(D.data,2)) = Off*ones(size(D.data,2),1);       
%        StimOn(sweepCount+1:sweepCount+size(D.data,2)) = On; % This should work just as well as the other way - ASK MICHAEL WHY THIS IS IMPLEMENTED
%        StimOff(sweepCount+1:sweepCount+size(D.data,2)) = Off;  
       StimLength(sweepCount+1:sweepCount+size(D.data,2)) = ...
         unique(StimOff(sweepCount+1:sweepCount+size(D.data,2))) - ...
          unique(StimOn(sweepCount+1:sweepCount+size(D.data,2)));
       
       if round(unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))),-1) == ... % added round because sometimes the ON and OFFSet differ slightly 
                round(1/D.param.xScale(2)) && ...
                round(unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))),-1) ~= 20000 % added this to remove the capacitance from falling into LP. It weirdly works otherwise
           stimulus_name = 'Long Pulse' ;  
           BinaryLP(sweepCount+1:sweepCount+size(D.data,2)) = 1;
           BinarySP(sweepCount+1:sweepCount+size(D.data,2)) = 0;
       elseif round(unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))),-1) == ...% added round because sometimes the ON and OFFSet differ slightly (like by 1)
                round(1/D.param.xScale(2))*0.003
           stimulus_name = 'Short Pulse' ;  
           BinaryLP(sweepCount+1:sweepCount+size(D.data,2)) = 0;
           BinarySP(sweepCount+1:sweepCount+size(D.data,2)) = 1;
       elseif unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))) < 0 % maybe catches an error
           disp(['ERROR: stimulus type with NEGATIVE duration of '... includes ramp problem
                , num2str(unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))/round(1/D.param.xScale(2)))), ' s'])
           pause
           stimulus_name = 'Unknown'; % added 03.02.2022
           BinaryLP(sweepCount+1:sweepCount+size(D.data,2)) = 0;
           BinarySP(sweepCount+1:sweepCount+size(D.data,2))  = 0;    
       else
           disp(['Unknown stimulus type with duration of '... includes ramp problem
                , num2str(unique(StimLength(sweepCount+1:sweepCount+size(D.data,2))/round(1/D.param.xScale(2)))), ' s'])
            stimulus_name = 'Unknown'; % added 03.02.2022
           BinaryLP(sweepCount+1:sweepCount+size(D.data,2)) = 0;
           BinarySP(sweepCount+1:sweepCount+size(D.data,2))  = 0;    

       end        
            for s = 1:size(D.data,2)
                
                if On-(0.45/D.param.xScale(1)) < 0 % calculating bias current
                    bias = mean(D.data(1:On,s,2)); % no testpulse or unknown protocols; pA
                else
                    bias = mean(D.data(ceil(On-(0.45/D.param.xScale(1))):On,s,2)); % with test pulse; pA; ceil because matlab throws an error otherwise
                end
                
                SweepAmp(sweepCount+1) = round(mean(D.data(StimOn(sweepCount+1)...
                                                :StimOff(sweepCount+1),s,2)),-1);
                
                ccs = types.core.CurrentClampStimulusSeries( ...
                        'electrode', ic_elec_link, ...
                        'gain', NaN, ...
                        'stimulus_description', stimulus_name, ...
                        'data_unit', D.param.yUnits{2}, ...
                        'data', D.data(:,s,2), ...
                        'sweep_number', sweepCount,...
                        'starting_time', seconds(duration(D.param.fTime)),...
                        'starting_time_rate', round(1/D.param.xScale(2))...
                        );
                    
                nwb.stimulus_presentation.set(['Sweep_', num2str(sweepCount)], ccs);    
                
                nwb.acquisition.set(['Sweep_', num2str(sweepCount)], ...
                    types.core.CurrentClampSeries( ...
                        'bias_current', bias,...%mean(D.data(StimOn-(0.15/D.param.xScale(1)):StimOn,s,2))*1e-12, ... % Unit: pA; Extracting bias current from current trace. Reference is StimOn. Start is 450 ms before StimOn which should be the end of test pulse but not all traces have a test pulse.
                        'bridge_balance', [], ... % Unit: Ohm
                        'capacitance_compensation', [], ... % Unit: Farad
                        'data', D.data(:,s,1), ...
                        'data_unit', D.param.yUnits{1}, ...
                        'electrode', ic_elec_link, ...
                        'stimulus_description', stimulus_name, ...   
                        'sweep_number', sweepCount,...
                        'starting_time', seconds(duration(D.param.fTime)),...
                        'starting_time_rate', round(1/D.param.xScale(1))...
                          ));
                    
                sweep_ch2 = types.untyped.ObjectView(['/acquisition/', 'Sweep_', num2str(sweepCount)]);
                sweep_ch1 = types.untyped.ObjectView(['/stimulus/presentation/', 'Sweep_', num2str(sweepCount)]);
                sweep_series_objects_ch1 = [sweep_series_objects_ch1, sweep_ch1]; 
                sweep_series_objects_ch2 = [sweep_series_objects_ch2, sweep_ch2];
                sweepCount =  sweepCount + 1;   
            end
            
   %% Intracellular recordings table
            
   if sweepCount > 5
    BinaryLP(isnan(BinaryLP)) = 0; % should be accounted for in line 98/99
    BinarySP(isnan(BinarySP)) = 0;
    StimOn(isnan(StimOn)) = 0;
    StimOff(isnan(StimOff)) = 0;
    SweepAmp(isnan(SweepAmp)) = 0;
    
            StimDuration = [];
            StimDuration = StimOff - StimOn;  % Round? 

            ic_rec_table = types.core.IntracellularRecordingsTable( ...
                'categories', {'electrodes', 'stimuli', 'responses'}, ...
                'colnames', {'recordings_tag'}, ...
                'description', [ ...
                    'A table to group together a stimulus and response from a single ', ...
                    'electrode and a single simultaneous recording and for storing ', ...
                    'metadata about the intracellular recording.'], ...
                'id', types.hdmf_common.ElementIdentifiers( ...
                    'data', int64([0:sweepCount-1]) ...
                ) ...
            );

            ic_rec_table.electrodes = types.core.IntracellularElectrodesTable( ...
                'description', 'Table for storing intracellular electrode related metadata.', ...
                'colnames', {'electrode'}, ...
                'id', types.hdmf_common.ElementIdentifiers( ...
                    'data', int64([0:sweepCount-1]) ...
                ), ...
                'electrode', types.hdmf_common.VectorData( ...
                    'data', repmat(types.untyped.ObjectView(ic_elec), sweepCount, 1), ...
                    'description', 'Column for storing the reference to the intracellular electrode' ...
                ) ...
            );

            ic_rec_table.stimuli = types.core.IntracellularStimuliTable( ...
                'description', 'Table for storing intracellular stimulus related metadata.', ...
                'colnames', {'stimulus'}, ...
                'id', types.hdmf_common.ElementIdentifiers( ...
                    'data', int64([0:sweepCount-1])  ...
                ), ...
                'stimulus', types.core.TimeSeriesReferenceVectorData( ...
                    'description', 'Column storing the reference to the recorded stimulus for the recording (rows)', ...
                    'data', struct( ...
                        'idx_start', [StimOn(StimOn~=0)'], ...
                        'count', [StimDuration(StimDuration~=0)], ...
                        'timeseries', [sweep_series_objects_ch1] ...
                    )...
                )...
            );
            ic_rec_table.responses = types.core.IntracellularResponsesTable( ...
                'description', 'Table for storing intracellular response related metadata.', ...
                'colnames', {'response'}, ...
                'id', types.hdmf_common.ElementIdentifiers( ...
                    'data', int64([0:sweepCount-1]) ...
                ), ...
                'response', types.core.TimeSeriesReferenceVectorData( ...
                    'description', 'Column storing the reference to the recorded response for the recording (rows)', ...
                    'data', struct( ...
                        'idx_start', [StimOn'], ...
                        'count', [StimDuration], ...
                        'timeseries', [sweep_series_objects_ch2]...
                    )...
                )...
            );

        % Add protocol type as column of electrodes table

        Protocols = cell.empty;

        for s = 1:length(BinaryLP)
            if BinaryLP(s)
              Protocols(s) = {'LP'};
            elseif BinarySP(s)
              Protocols(s) = {'SP'};   
            else
              Protocols(s) = {'unknown'};          
            end
        end

        ic_rec_table.categories = [ic_rec_table.categories, {'protocol_type'}];
        ic_rec_table.dynamictable.set( ...
            'protocol_type', types.hdmf_common.DynamicTable( ...
                'description', 'category table for lab-specific recording metadata', ...
                'colnames', {'label'}, ...
                'id', types.hdmf_common.ElementIdentifiers( ...
                    'data', int64([0:sweepCount-2]) ...
                ), ...
                'label', types.hdmf_common.VectorData( ...
                    'data', Protocols, ...
                    'description', 'Abbreviated Stimulus type: LP= Long Pulse, SP= Short Pulse' ...
                ) ...
            ) ...
        );

        % Add Current amplitude as column of stimulus table
         ic_rec_table.stimuli.colnames = [ic_rec_table.stimuli.colnames {'current_amplitude'}];
         ic_rec_table.stimuli.vectordata.set('current_amplitude', types.hdmf_common.VectorData( ...
            'data', [SweepAmp'], ...
            'description', 'Current amplitude of injected square pulse' ...
            ) ...
        );

        nwb.general_intracellular_ephys_intracellular_recordings = ic_rec_table;

   end
    end
%         if ~exist(outputfolder, 'dir')
%             mkdir(outputfolder)
%         end
    filename = fullfile([outputfolder , '\',nwb.identifier '.nwb']);
  nwbExport(nwb, filename);
end
